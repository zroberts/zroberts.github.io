{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","input1","input2","inputs","setInputs","outputFormat","setOutputFormat","result","setResult","useEffect","onChange","e","prevState","target","name","value","handleClick","action","attributes","getNamedItem","nodeValue","basicMath","addToString","subtractToString","multiplyToString","divideToString","powerToString","squareRootToString","console","log","className","id","ToggleButtonGroup","type","vertical","ToggleButton","variant","readOnly","ButtonGroup","Button","onClick","Accordion","Header","Body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f8cc0ae6.chunk.js","sourcesContent":["import './App.css';\nimport basicMath from \"@mferns/basic-math\";\nimport React, { useEffect, useState } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Button, ButtonGroup, ToggleButtonGroup, ToggleButton, Accordion } from \"react-bootstrap\";\n\nfunction App() {\n  const [inputs, setInputs] = useState({\n    input1: '', \n    input2: ''\n  });\n  const [outputFormat, setOutputFormat] = useState(\"decimal\");\n  const [result, setResult] = useState();\n\n  useEffect(() => {}, [])\n\n  const onChange = (e) => {\n    setInputs((prevState) => ({\n      ...prevState,\n      [e.target.name]: e.target.value\n    }))\n  };\n  const handleClick = (e) =>{\n    var action = e.target.attributes.getNamedItem('action');\n    \n    switch(action.nodeValue){\n      case \"add\": \n        setResult(\n          basicMath.addToString(outputFormat, inputs.input1, inputs.input2)\n        );\n        break;\n      case \"sub\":\n        setResult(basicMath.subtractToString(outputFormat, inputs.input1, inputs.input2));\n        break;\n      case \"multiply\":\n         setResult(basicMath.multiplyToString(outputFormat, inputs.input1, inputs.input2));\n         break;\n      case \"divide\": \n        setResult(basicMath.divideToString(outputFormat, inputs.input1, inputs.input2));\n        break;\n      case \"exponent\":\n        setResult(basicMath.powerToString(outputFormat, inputs.input1, inputs.input2));\n        break;\n      case \"sqrRt\": \n        setResult(basicMath.squareRootToString(outputFormat, inputs.input1));\n        break;\n      default: \n        console.log(`Something went wrong, what button did you click?!?! ${action.nodeValue}`);\n        break;\n    }\n  }\n  \n  const handleOutput = (e) =>  { setOutputFormat(e) }; \n  return (\n    <div className=\"centered\">\n      <form>\n        <div id=\"\" className=\"fltRight\">\n          <ToggleButtonGroup\n            type=\"radio\"\n            name=\"output\"\n            value={outputFormat}\n            onChange={handleOutput}\n            vertical\n          >\n            <ToggleButton id=\"decimal\" value=\"decimal\" variant=\"secondary\">\n              Decimal\n            </ToggleButton>\n            <ToggleButton id=\"binary\" value=\"binary\" variant=\"secondary\">\n              Binary\n            </ToggleButton>\n            <ToggleButton id=\"octal\" value=\"octal\" variant=\"secondary\">\n              Octal\n            </ToggleButton>\n            <ToggleButton id=\"hex\" value=\"hex\" variant=\"secondary\">\n              Hex\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </div>\n        <div className=\"itemGroup\">\n          <label>Input 1</label>\n          <input\n            type=\"text\"\n            name=\"input1\"\n            value={inputs.input1}\n            onChange={onChange}\n          />\n        </div>\n        <div className=\"itemGroup\">\n          <label>Input 2</label>\n          <input\n            type=\"text\"\n            name=\"input2\"\n            value={inputs.input2}\n            onChange={onChange}\n          />\n        </div>\n        <div className=\"itemGroup\">\n          <label>Result </label>\n          <input\n            type=\"text\"\n            name=\"result\"\n            value={result}\n            className=\"readOnly\"\n            readOnly={true}\n          />\n        </div>\n        <div className=\"buttonGroup\">\n          <ButtonGroup>\n            <Button onClick={handleClick} action=\"add\">\n              Add\n            </Button>\n            <Button onClick={handleClick} action=\"sub\">\n              Subtract\n            </Button>\n            <Button onClick={handleClick} action=\"multiply\">\n              Multiply\n            </Button>\n            <Button onClick={handleClick} action=\"divide\">\n              Divide\n            </Button>\n            <Button onClick={handleClick} action=\"exponent\">\n              Raise to\n            </Button>\n            <Button onClick={handleClick} action=\"sqrRt\">\n              Square Root\n            </Button>\n          </ButtonGroup>\n        </div>\n      </form>\n      <Accordion className=\"accordion\">\n        <Accordion.Header>\n          Instructions\n        </Accordion.Header>\n        <Accordion.Body>\n          <p>Put your values into input 1 and Input 2. Select the button below to perform the action. Input 2 will be subtracted from Input 1, and Input 1 will be divided by input 2. If you choose sq root, only the first input will be used</p>\n          <p>You are able to change the output type by selecting from the right side. Default is standard decimal.</p>\n        </Accordion.Body>\n      </Accordion>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}